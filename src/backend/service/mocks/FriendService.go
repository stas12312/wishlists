// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	model "main/model"

	mock "github.com/stretchr/testify/mock"
)

// FriendService is an autogenerated mock type for the FriendService type
type FriendService struct {
	mock.Mock
}

// AddFriend provides a mock function with given fields: userId, friendId
func (_m *FriendService) AddFriend(userId int64, friendId int64) error {
	ret := _m.Called(userId, friendId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(userId, friendId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ApplyRequest provides a mock function with given fields: userId, fromUserId
func (_m *FriendService) ApplyRequest(userId int64, fromUserId int64) error {
	ret := _m.Called(userId, fromUserId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(userId, fromUserId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeclineRequest provides a mock function with given fields: userId, fromUserId
func (_m *FriendService) DeclineRequest(userId int64, fromUserId int64) error {
	ret := _m.Called(userId, fromUserId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(userId, fromUserId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRequest provides a mock function with given fields: fromUserId, toUserId
func (_m *FriendService) DeleteRequest(fromUserId int64, toUserId int64) error {
	ret := _m.Called(fromUserId, toUserId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(fromUserId, toUserId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FriendRequestList provides a mock function with given fields: userId
func (_m *FriendService) FriendRequestList(userId int64) (*[]model.FriendRequest, error) {
	ret := _m.Called(userId)

	var r0 *[]model.FriendRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*[]model.FriendRequest, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(int64) *[]model.FriendRequest); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.FriendRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCounters provides a mock function with given fields: userId
func (_m *FriendService) GetCounters(userId int64) (model.Counters, error) {
	ret := _m.Called(userId)

	var r0 model.Counters
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (model.Counters, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(int64) model.Counters); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(model.Counters)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFriendStatus provides a mock function with given fields: userId, friendId
func (_m *FriendService) GetFriendStatus(userId int64, friendId int64) model.FriendStatus {
	ret := _m.Called(userId, friendId)

	var r0 model.FriendStatus
	if rf, ok := ret.Get(0).(func(int64, int64) model.FriendStatus); ok {
		r0 = rf(userId, friendId)
	} else {
		r0 = ret.Get(0).(model.FriendStatus)
	}

	return r0
}

// GetFriendsByIds provides a mock function with given fields: userId, userIds
func (_m *FriendService) GetFriendsByIds(userId int64, userIds []int64) ([]int64, error) {
	ret := _m.Called(userId, userIds)

	var r0 []int64
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, []int64) ([]int64, error)); ok {
		return rf(userId, userIds)
	}
	if rf, ok := ret.Get(0).(func(int64, []int64) []int64); ok {
		r0 = rf(userId, userIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, []int64) error); ok {
		r1 = rf(userId, userIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsFriends provides a mock function with given fields: userId, friendId
func (_m *FriendService) IsFriends(userId int64, friendId int64) bool {
	ret := _m.Called(userId, friendId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int64, int64) bool); ok {
		r0 = rf(userId, friendId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ListOfFriends provides a mock function with given fields: userId
func (_m *FriendService) ListOfFriends(userId int64) (*[]model.User, error) {
	ret := _m.Called(userId)

	var r0 *[]model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*[]model.User, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(int64) *[]model.User); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveFriend provides a mock function with given fields: userId, friendId
func (_m *FriendService) RemoveFriend(userId int64, friendId int64) error {
	ret := _m.Called(userId, friendId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(userId, friendId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewFriendService interface {
	mock.TestingT
	Cleanup(func())
}

// NewFriendService creates a new instance of FriendService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFriendService(t mockConstructorTestingTNewFriendService) *FriendService {
	mock := &FriendService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
