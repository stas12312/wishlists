// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	model "main/model"

	mock "github.com/stretchr/testify/mock"

	websocket "github.com/gofiber/contrib/websocket"
)

// WSService is an autogenerated mock type for the WSService type
type WSService struct {
	mock.Mock
}

// AddConnection provides a mock function with given fields: userId, conn
func (_m *WSService) AddConnection(userId int64, conn *websocket.Conn) {
	_m.Called(userId, conn)
}

// AddToChannel provides a mock function with given fields: name, conn
func (_m *WSService) AddToChannel(name string, conn *websocket.Conn) {
	_m.Called(name, conn)
}

// DeleteConnection provides a mock function with given fields: userId, conn
func (_m *WSService) DeleteConnection(userId int64, conn *websocket.Conn) {
	_m.Called(userId, conn)
}

// RemoveFromChannel provides a mock function with given fields: name, conn
func (_m *WSService) RemoveFromChannel(name string, conn *websocket.Conn) {
	_m.Called(name, conn)
}

// SendMessage provides a mock function with given fields: userId, message
func (_m *WSService) SendMessage(userId int64, message model.WSMessage) {
	_m.Called(userId, message)
}

// SendMessageToChannel provides a mock function with given fields: channelName, msg
func (_m *WSService) SendMessageToChannel(channelName string, msg model.WSMessage) {
	_m.Called(channelName, msg)
}

type mockConstructorTestingTNewWSService interface {
	mock.TestingT
	Cleanup(func())
}

// NewWSService creates a new instance of WSService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWSService(t mockConstructorTestingTNewWSService) *WSService {
	mock := &WSService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
