// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"
	model "main/model"

	mock "github.com/stretchr/testify/mock"

	oauth "main/oauth"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// ChangePassword provides a mock function with given fields: ctx, userId, oldPassword, newPassword
func (_m *UserService) ChangePassword(ctx context.Context, userId int64, oldPassword string, newPassword string) error {
	ret := _m.Called(ctx, userId, oldPassword, newPassword)

	if len(ret) == 0 {
		panic("no return value specified for ChangePassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, string) error); ok {
		r0 = rf(ctx, userId, oldPassword, newPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckCode provides a mock function with given fields: ctx, code, withAttempt
func (_m *UserService) CheckCode(ctx context.Context, code *model.Code, withAttempt bool) (*model.Code, bool) {
	ret := _m.Called(ctx, code, withAttempt)

	if len(ret) == 0 {
		panic("no return value specified for CheckCode")
	}

	var r0 *model.Code
	var r1 bool
	if rf, ok := ret.Get(0).(func(context.Context, *model.Code, bool) (*model.Code, bool)); ok {
		return rf(ctx, code, withAttempt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Code, bool) *model.Code); ok {
		r0 = rf(ctx, code, withAttempt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Code)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Code, bool) bool); ok {
		r1 = rf(ctx, code, withAttempt)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Confirm provides a mock function with given fields: ctx, code
func (_m *UserService) Confirm(ctx context.Context, code *model.Code) (*model.User, error) {
	ret := _m.Called(ctx, code)

	if len(ret) == 0 {
		panic("no return value specified for Confirm")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Code) (*model.User, error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Code) *model.User); ok {
		r0 = rf(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Code) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByEmail provides a mock function with given fields: ctx, email
func (_m *UserService) GetByEmail(ctx context.Context, email string) (*model.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx, id
func (_m *UserService) GetById(ctx context.Context, id int64) (*model.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*model.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *model.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOAuthProviders provides a mock function with given fields: ctx
func (_m *UserService) ListOAuthProviders(ctx context.Context) []oauth.Provider {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListOAuthProviders")
	}

	var r0 []oauth.Provider
	if rf, ok := ret.Get(0).(func(context.Context) []oauth.Provider); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]oauth.Provider)
		}
	}

	return r0
}

// Login provides a mock function with given fields: ctx, email, password
func (_m *UserService) Login(ctx context.Context, email string, password string) (*model.User, error) {
	ret := _m.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*model.User, error)); ok {
		return rf(ctx, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.User); ok {
		r0 = rf(ctx, email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OAuthAuth provides a mock function with given fields: ctx, userId, oAuthType, code
func (_m *UserService) OAuthAuth(ctx context.Context, userId int64, oAuthType string, code string) (*model.User, error) {
	ret := _m.Called(ctx, userId, oAuthType, code)

	if len(ret) == 0 {
		panic("no return value specified for OAuthAuth")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, string) (*model.User, error)); ok {
		return rf(ctx, userId, oAuthType, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, string) *model.User); ok {
		r0 = rf(ctx, userId, oAuthType, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string, string) error); ok {
		r1 = rf(ctx, userId, oAuthType, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, email, password, name
func (_m *UserService) Register(ctx context.Context, email string, password string, name string) (*model.User, *model.Code, error) {
	ret := _m.Called(ctx, email, password, name)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *model.User
	var r1 *model.Code
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*model.User, *model.Code, error)); ok {
		return rf(ctx, email, password, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *model.User); ok {
		r0 = rf(ctx, email, password, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) *model.Code); ok {
		r1 = rf(ctx, email, password, name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.Code)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, string) error); ok {
		r2 = rf(ctx, email, password, name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Reset provides a mock function with given fields: ctx, code, password
func (_m *UserService) Reset(ctx context.Context, code *model.Code, password string) (*model.User, error) {
	ret := _m.Called(ctx, code, password)

	if len(ret) == 0 {
		panic("no return value specified for Reset")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Code, string) (*model.User, error)); ok {
		return rf(ctx, code, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Code, string) *model.User); ok {
		r0 = rf(ctx, code, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Code, string) error); ok {
		r1 = rf(ctx, code, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Restore provides a mock function with given fields: ctx, email
func (_m *UserService) Restore(ctx context.Context, email string) (*model.Code, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for Restore")
	}

	var r0 *model.Code
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Code, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Code); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Code)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
