// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	model "main/model"

	mock "github.com/stretchr/testify/mock"
)

// OAuthUserRepository is an autogenerated mock type for the OAuthUserRepository type
type OAuthUserRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: user
func (_m *OAuthUserRepository) Create(user *model.OAuthUser) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.OAuthUser) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByOAuthUserId provides a mock function with given fields: oAuthUserId, provider
func (_m *OAuthUserRepository) DeleteByOAuthUserId(oAuthUserId string, provider string) error {
	ret := _m.Called(oAuthUserId, provider)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByOAuthUserId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(oAuthUserId, provider)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByUserId provides a mock function with given fields: userId, provider
func (_m *OAuthUserRepository) DeleteByUserId(userId int64, provider string) error {
	ret := _m.Called(userId, provider)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByUserId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, string) error); ok {
		r0 = rf(userId, provider)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: provider, oAuthUserId
func (_m *OAuthUserRepository) Get(provider string, oAuthUserId string) (*model.OAuthUser, error) {
	ret := _m.Called(provider, oAuthUserId)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *model.OAuthUser
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*model.OAuthUser, error)); ok {
		return rf(provider, oAuthUserId)
	}
	if rf, ok := ret.Get(0).(func(string, string) *model.OAuthUser); ok {
		r0 = rf(provider, oAuthUserId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OAuthUser)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(provider, oAuthUserId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByUserId provides a mock function with given fields: userId
func (_m *OAuthUserRepository) ListByUserId(userId int64) ([]model.OAuthUser, error) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for ListByUserId")
	}

	var r0 []model.OAuthUser
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]model.OAuthUser, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(int64) []model.OAuthUser); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.OAuthUser)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: user
func (_m *OAuthUserRepository) Update(user *model.OAuthUser) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.OAuthUser) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOAuthUserRepository creates a new instance of OAuthUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOAuthUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OAuthUserRepository {
	mock := &OAuthUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
