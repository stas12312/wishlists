// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	model "main/model"

	mock "github.com/stretchr/testify/mock"
)

// WishRepository is an autogenerated mock type for the WishRepository type
type WishRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: wish
func (_m *WishRepository) Create(wish *model.Wish) (*model.Wish, error) {
	ret := _m.Called(wish)

	var r0 *model.Wish
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Wish) (*model.Wish, error)); ok {
		return rf(wish)
	}
	if rf, ok := ret.Get(0).(func(*model.Wish) *model.Wish); ok {
		r0 = rf(wish)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Wish)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Wish) error); ok {
		r1 = rf(wish)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: wishUuid
func (_m *WishRepository) Delete(wishUuid string) error {
	ret := _m.Called(wishUuid)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(wishUuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: wishUuid
func (_m *WishRepository) Get(wishUuid string) (*model.Wish, error) {
	ret := _m.Called(wishUuid)

	var r0 *model.Wish
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Wish, error)); ok {
		return rf(wishUuid)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Wish); ok {
		r0 = rf(wishUuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Wish)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(wishUuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListForWishlist provides a mock function with given fields: wishlistUuid
func (_m *WishRepository) ListForWishlist(wishlistUuid string) (*[]model.Wish, error) {
	ret := _m.Called(wishlistUuid)

	var r0 *[]model.Wish
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*[]model.Wish, error)); ok {
		return rf(wishlistUuid)
	}
	if rf, ok := ret.Get(0).(func(string) *[]model.Wish); ok {
		r0 = rf(wishlistUuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.Wish)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(wishlistUuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Restore provides a mock function with given fields: wishUuid
func (_m *WishRepository) Restore(wishUuid string) error {
	ret := _m.Called(wishUuid)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(wishUuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: wish
func (_m *WishRepository) Update(wish *model.Wish) (*model.Wish, error) {
	ret := _m.Called(wish)

	var r0 *model.Wish
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Wish) (*model.Wish, error)); ok {
		return rf(wish)
	}
	if rf, ok := ret.Get(0).(func(*model.Wish) *model.Wish); ok {
		r0 = rf(wish)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Wish)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Wish) error); ok {
		r1 = rf(wish)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewWishRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewWishRepository creates a new instance of WishRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWishRepository(t mockConstructorTestingTNewWishRepository) *WishRepository {
	mock := &WishRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
