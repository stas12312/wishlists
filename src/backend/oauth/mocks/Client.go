// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	oauth "main/oauth"

	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// GetAuthUrl provides a mock function with given fields:
func (_m *Client) GetAuthUrl() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAuthUrl")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetConfig provides a mock function with given fields:
func (_m *Client) GetConfig() oauth.Config {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConfig")
	}

	var r0 oauth.Config
	if rf, ok := ret.Get(0).(func() oauth.Config); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(oauth.Config)
	}

	return r0
}

// GetLogoUrl provides a mock function with given fields:
func (_m *Client) GetLogoUrl() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLogoUrl")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetProvider provides a mock function with given fields:
func (_m *Client) GetProvider() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProvider")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetUserInfo provides a mock function with given fields: jwt_token
func (_m *Client) GetUserInfo(token string) (*oauth.User, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for GetUserInfo")
	}

	var r0 *oauth.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*oauth.User, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *oauth.User); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
